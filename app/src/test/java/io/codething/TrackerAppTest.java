/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.codething;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.powermock.reflect.Whitebox;

import java.util.Arrays;
import java.util.List;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class TrackerAppTest {

	private TrackerApp app;

	@Mock
	private User userMock;

	@Mock
	private User userMock2;

	@Mock
	private Activity activityMock;

	@BeforeEach
	void beforeAll() {
		app = new TrackerApp();
	}

	@Test
	void appHasThings() {
		assertThat(app.totalActivities(""), is(0));

		// add some things
		User emmett = new User("emmett", 70, 1500);
		User andy = new User("andy", 75, 1650);

		app.addUser(emmett);
		app.addUser(andy);

		app.addActivity("emmett", new Running(13, 2000));
		app.addActivity("emmett", new Walking(60, 5000));
		app.addActivity("emmett", new Swimming(10, 500));

		app.addActivity("andy", new Running(45, 5000));
		app.addActivity("andy", new Walking(60, 5000));
		app.addActivity("andy", new Swimming(20, 900));

		assertThat(app.totalActivities("emmett"), is(3));
		assertThat(app.totalActivities("emmett"), is(3));

	}

	@Test
	void duplicateUser() {
		assertThat(app.totalActivities(""), is(0));

		// add some things
		User emmett = new User("emmett", 70, 1500);
		User anotherEmmett = new User("emMETT", 75, 1650);

		app.addUser(emmett);

		IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {
			app.addUser(anotherEmmett);
		});

		assertThat(exception.getMessage(), is("UserId already exists (case is insensitive) : emmett"));

	}

	@Test
	void addUser() {

		// verify users are empty
		List<User> users = Whitebox.getInternalState(app, "users");
		assertThat(users, is(notNullValue()));
		assertThat(users, is(empty()));

		// call actual method
		app.addUser(userMock);

		// verify
		users = Whitebox.getInternalState(app, "users");

		assertThat(users, is(notNullValue()));
		assertThat(users, is(not(empty())));

		assertThat(users, hasItem(userMock));

	}

	@Test
	void getUser() {

		String userId = "emmett";
		when(userMock.getUserId()).thenReturn(userId);

		// call actual method
		User user = app.getUser("emmett");
		assertThat(user, is(nullValue()));

		// add a mock user
		Whitebox.setInternalState(app, "users", Arrays.asList(userMock));

		// verify we can get it via getUser
		user = app.getUser("emmett");
		assertThat(user, is(notNullValue()));
		assertThat(user, is(userMock));

	}

	@Test
	void addActivity() {

		// setup
		String userId = "emmett";
		when(userMock.getUserId()).thenReturn(userId);
		Whitebox.setInternalState(app, "users", Arrays.asList(userMock, userMock2));

		// call actual method
		app.addActivity(userId, activityMock);

		// verify it gets correct user from list
		// verify that is will call correct method on that user
		verify(userMock).addActivity(activityMock);
		verify(userMock2, never()).addActivity(activityMock);

	}

	@Test
	void totalActivities() {

		// setup
		String userId = "emmett";

		int totalActivities = app.totalActivities(userId);
		assertThat(totalActivities, is(0));

		when(userMock.getUserId()).thenReturn(userId);
		when(userMock.totalActivities()).thenReturn(100);
		Whitebox.setInternalState(app, "users", Arrays.asList(userMock, userMock2));

		// call actual method
		totalActivities = app.totalActivities(userId);

		// verify its calling correct underlying method on correct user
		assertThat(totalActivities, is(100));
		verify(userMock).totalActivities();

	}

	@Test
	void totalCaloriesBurntWithBmr() {
		// setup
		String userId = "emmett";

		int totalCaloriesBurntWithBmr = app.totalCaloriesBurnt(userId, true);
		assertThat(totalCaloriesBurntWithBmr, is(0));

		when(userMock.getUserId()).thenReturn(userId);
		when(userMock.totalCaloriesBurntIncludingBmr()).thenReturn(10000);
		Whitebox.setInternalState(app, "users", Arrays.asList(userMock, userMock2));

		// call actual method
		totalCaloriesBurntWithBmr = app.totalCaloriesBurnt(userId, true);

		// verify its calling correct underlying method on correct user
		assertThat(totalCaloriesBurntWithBmr, is(10000));
		verify(userMock).totalCaloriesBurntIncludingBmr();
	}

	@Test
	void totalCaloriesBurntWithoutBmr() {
		// setup
		String userId = "emmett";

		int totalCaloriesBurntWithoutBmr = app.totalCaloriesBurnt(userId, false);
		assertThat(totalCaloriesBurntWithoutBmr, is(0));

		when(userMock.getUserId()).thenReturn(userId);
		when(userMock.totalCaloriesBurntExcludingBmr()).thenReturn(10000);
		Whitebox.setInternalState(app, "users", Arrays.asList(userMock, userMock2));

		// call actual method
		totalCaloriesBurntWithoutBmr = app.totalCaloriesBurnt(userId, false);

		// verify its calling correct underlying method on correct user
		assertThat(totalCaloriesBurntWithoutBmr, is(10000));
		verify(userMock).totalCaloriesBurntExcludingBmr();
	}

	@Test
	void totalDurationInMinutes() {
		// setup
		String userId = "emmett";

		int totalDurationInMinutes = app.totalDurationInMinutes(userId);
		assertThat(totalDurationInMinutes, is(0));

		when(userMock.getUserId()).thenReturn(userId);
		when(userMock.totalDurationInMinutes()).thenReturn(100);
		Whitebox.setInternalState(app, "users", Arrays.asList(userMock, userMock2));

		// call actual method
		totalDurationInMinutes = app.totalDurationInMinutes(userId);

		// verify its calling correct underlying method on correct user
		assertThat(totalDurationInMinutes, is(100));
		verify(userMock).totalDurationInMinutes();
	}
}
