/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    jacoco
    id("com.diffplug.spotless") version "6.0.0"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation(libs.guava)
    testImplementation("org.hamcrest:hamcrest:2.2")
    testImplementation("org.mockito:mockito-core:5.12.0")
    testImplementation("org.mockito:mockito-junit-jupiter:5.12.0")
    testImplementation("org.powermock:powermock-api-mockito2:2.0.9")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.10.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.10.0")
}

testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use JUnit Jupiter test framework
            useJUnitJupiter("5.10.0")

        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

application {
    // Define the main class for the application.
    mainClass.set("io.codething.TrackerApp")
}

// JaCoCo configuration
jacoco {
    toolVersion = "0.8.8"
}

// JaCoCo configuration
jacoco {
    toolVersion = "0.8.8"
}

tasks.test {
    useJUnitPlatform()

    finalizedBy(tasks.jacocoTestReport) // Generate the report after tests run
}

tasks.jacocoTestReport {
    dependsOn(tasks.test) // Tests must run before generating the report

    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.outputLocation.set(file("build/reports/jacoco"))
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}


spotless {
    java {
        // Apply
        //googleJavaFormat("1.15.0")
        eclipse() //use default eclispe formatting


        // Apply additional rules
        target("src/**/*.java")
    }
    kotlin {
        // Apply ktlint for Kotlin code
        ktlint("0.41.0").userData(mapOf("disabled_rules" to "no-wildcard-imports"))
        target("src/**/*.kt")
    }
    format("misc") {
        target("*.gradle.kts", "*.md", ".gitignore")
        trimTrailingWhitespace()
        endWithNewline()
    }
}
